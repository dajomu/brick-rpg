{"version":3,"sources":["components/Menu.tsx","constants.ts","components/three/BasePlate.ts","components/three/Columns.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","_this$props","changeInterfaceState","interfaceState","react_default","a","createElement","className","concat","onClick","Component","brickHeight","brickLength","basePlateLength","basePlateWidth","wireFrameColour","selectedWireFrameColour","createGhostBrick","geometry","THREE","outlineGeometry","outlineMaterial","color","linewidth","BasePlate","scene","placeColumn","ghostBrick","hoverableObjects","squares","initSquares","length","width","createSquare","square","material","cube","onHover","placeGhostBrick","hideGhostBrick","cubeOutline","add","push","position","name","initGhostBrick","set","visible","Columns","columns","resizeColumn","addColumn","column","resizeSelectedColumn","children","forEach","child","scale","setY","undefined","App","mount","camera","renderer","frameId","basePlate","controls","raycaster","mouse","clickedMouse","componentDidMount","clientWidth","height","clientHeight","z","y","setClearColor","setSize","appendChild","domElement","OrbitControls","minPolarAngle","maxPolarAngle","Math","PI","minDistance","maxDistance","Infinity","enableZoom","zoomSpeed","window","addEventListener","onMouseMove","start","event","x","clientX","innerWidth","clientY","innerHeight","requestAnimationFrame","animate","stop","cancelAnimationFrame","checkRayCollisions","renderScene","state","setFromCamera","intersects","intersectObjects","getHoverableObjects","object","zoomDistance","target","distanceTo","round","clickOnScene","clone","setState","deselectColumn","render","newState","background","antialias","removeChild","_this2","style","ref","src_components_Menu","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5c558aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Menu.css';\n\ninterface MenuProps {\n  changeInterfaceState: (newState: string) => void;\n  interfaceState: string;\n}\n\nclass Menu extends Component<MenuProps> {\n\n  constructor(props: MenuProps) {\n    super(props);\n    console.log(props);\n  }\n\n\nrender () {\n  const { changeInterfaceState, interfaceState } = this.props;\n    return(\n      <div className=\"Menu\">\n        <button\n          className={`menu-button ${interfaceState == \"ADD_COLUMN\" ? 'selected' : ''}`}\n          onClick={() => {changeInterfaceState(interfaceState == \"ADD_COLUMN\" ? \"VIEW\" : \"ADD_COLUMN\")}}\n          >Add Column</button>\n      </div>\n    )\n  }\n}\nexport default Menu;","export const brickHeight = 1;\nexport const brickLength = 1.6;\nexport const basePlateLength = 13;\nexport const basePlateWidth = 9;\n\nexport const wireFrameColour = 0x222222;\nexport const selectedWireFrameColour = 0xff2222;","import { brickHeight, brickLength, wireFrameColour, selectedWireFrameColour } from '../../constants';\nimport * as THREE from 'three';\n\nexport interface HoverableMesh extends THREE.Mesh {\n  onHover: any;\n  onClick: any;\n}\n\nconst createGhostBrick = () => {\n  const geometry = new THREE.BoxGeometry( brickLength, brickHeight, brickLength );\n  const outlineGeometry = new THREE.EdgesGeometry( geometry );\n  const outlineMaterial = new THREE.LineBasicMaterial( { color: selectedWireFrameColour, linewidth: 100 } );\n  return new THREE.LineSegments( outlineGeometry, outlineMaterial );\n}\n\nexport default class BasePlate {\n  ghostBrick = createGhostBrick();\n  hoverableObjects: Array<HoverableMesh> = [];\n  scene: THREE.Scene\n  squares = new THREE.Group();\n  basePlateLength: number;\n  basePlateWidth: number;\n  placeColumn: (length: number, width: number) => void;\n\n  constructor(scene: THREE.Scene, basePlateLength: number, basePlateWidth: number, placeColumn: (length: number, width: number) => void) {\n    this.scene = scene;\n    this.basePlateLength = basePlateLength;\n    this.basePlateWidth = basePlateWidth;\n    this.placeColumn = placeColumn;\n    this.initSquares(basePlateLength, basePlateWidth);\n    this.squares.position.add(new THREE.Vector3(-(basePlateLength * brickLength /2), 0, -(basePlateWidth * brickLength /2) ));\n    this.initGhostBrick();\n    scene.add(this.squares);\n  }\n\n  initGhostBrick() {\n    this.ghostBrick.position.set(0, 0.6, 0);\n    this.ghostBrick.visible = false;\n    this.scene.add(this.ghostBrick);\n  }\n\n  placeGhostBrick(length: number, width: number) {\n    this.ghostBrick.position.set(((length - this.basePlateLength/2) * brickLength), brickHeight/2, ((width - this.basePlateWidth/2) * brickLength));\n    this.ghostBrick.visible = true;\n  }\n\n  hideGhostBrick () {\n    this.ghostBrick.visible = false;\n  }\n\n  public getHoverableObjects() {\n    return this.hoverableObjects;\n  }\n\n  private initSquares = (basePlateLength: number, basePlateWidth: number) => {\n    for(let length = 1; length <= basePlateLength; length++) {\n      for(let width = 1; width <= basePlateWidth; width++) {\n        this.createSquare(length, width);\n      }\n    }\n  }\n  \n  private createSquare = (length: number, width: number) => {\n    const square = new THREE.Group();\n    const geometry = new THREE.BoxGeometry( brickLength, 0.1, brickLength );\n    const material = new THREE.MeshBasicMaterial( {color: 0xeeeeee} );\n    const cube = new THREE.Mesh( geometry, material );\n    (cube as HoverableMesh).onHover = (interfaceState: string) => {if(interfaceState == \"ADD_COLUMN\") {this.placeGhostBrick(length, width)}}\n    (cube as HoverableMesh).onClick = (interfaceState: string) => {\n      this.hideGhostBrick();\n      if(interfaceState == \"ADD_COLUMN\") {\n        this.placeColumn(length, width);\n      }\n    }\n\n    const outlineGeometry = new THREE.EdgesGeometry( geometry ); // or WireframeGeometry( geometry )\n    const outlineMaterial = new THREE.LineBasicMaterial( { color: wireFrameColour, linewidth: 100 } );\n    const cubeOutline = new THREE.LineSegments( outlineGeometry, outlineMaterial );\n\n    square.add(cube);\n    square.add(cubeOutline);\n    this.hoverableObjects.push(cube as HoverableMesh)\n    square.position.add(new THREE.Vector3(length * brickLength, 0, width * brickLength));\n    square.name = `brick-${length}-${width}`;\n    this.squares.add(square)\n  }\n}\n","import { brickHeight, brickLength, wireFrameColour, selectedWireFrameColour } from '../../constants';\nimport * as THREE from 'three';\n\nexport interface HoverableMesh extends THREE.Mesh {\n  onHover: any;\n  onClick: any;\n}\n\nexport default class Columns {\n  scene: THREE.Scene\n  columns = new THREE.Group();\n  basePlateLength: number;\n  basePlateWidth: number;\n  resizeColumn?: THREE.Group;\n\n  constructor(scene: THREE.Scene, basePlateLength: number, basePlateWidth: number) {\n    this.scene = scene;\n    this.basePlateLength = basePlateLength;\n    this.basePlateWidth = basePlateWidth;\n    this.columns.position.add(new THREE.Vector3(-(basePlateLength * brickLength /2), 0, -(basePlateWidth * brickLength /2) ));\n    scene.add(this.columns);\n  }\n\n  public addColumn = (length: number, width: number) => {\n    const column = new THREE.Group();\n    const geometry = new THREE.BoxGeometry( brickLength, brickHeight, brickLength );\n    const material = new THREE.MeshBasicMaterial( {color: 0xffffff} );\n    const cube = new THREE.Mesh( geometry, material );\n\n    const outlineGeometry = new THREE.EdgesGeometry( geometry );\n    const outlineMaterial = new THREE.LineBasicMaterial( { color: selectedWireFrameColour, linewidth: 100 } );\n    const cubeOutline = new THREE.LineSegments( outlineGeometry, outlineMaterial );\n\n    column.add(cube);\n    column.add(cubeOutline);\n    column.position.add(new THREE.Vector3(length * brickLength, 0.56, width * brickLength));\n    column.name = `column-${length}-${width}`;\n    this.columns.add(column);\n    this.resizeColumn = column;\n  }\n\n  public resizeSelectedColumn = (length: number) => {\n    if(this.resizeColumn && length > 0) {\n      this.resizeColumn.children.forEach(child => {\n        child.scale.setY(length);\n      });\n      this.resizeColumn.position.setY(length/2)\n    }\n  }\n\n  public deselectColumn() {\n    if(this.resizeColumn) {\n      ((this.resizeColumn.children[1] as THREE.LineSegments).material as any).color.set(wireFrameColour);\n      this.resizeColumn = undefined;\n    }\n  }\n}","import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport Menu from './components/Menu';\nimport BasePlate, {HoverableMesh} from './components/three/BasePlate';\nimport Columns from './components/three/Columns';\nimport {basePlateLength, basePlateWidth} from './constants';\nimport './App.css';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n\nclass App extends Component<{}, {interfaceState: string}> {\n  mount: HTMLDivElement | null;\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera;\n  renderer: THREE.WebGLRenderer;\n  frameId: number | null;\n  basePlate: BasePlate;\n  columns: Columns;\n  controls: OrbitControls | null;\n  raycaster = new THREE.Raycaster();\n  mouse = new THREE.Vector2();\n  clickedMouse?: THREE.Vector2;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      interfaceState: 'VIEW',\n    };\n    this.mount = null;\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color( 0xffffff );\n    this.camera = new THREE.PerspectiveCamera( 70, 1, 0.1, 1000 );\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.controls = null;\n\n    this.basePlate = new BasePlate(this.scene, basePlateLength, basePlateWidth, this.placeColumn);\n    this.columns = new Columns(this.scene, basePlateLength, basePlateWidth);\n\n    this.frameId = null;\n  }\n\n  componentDidMount = () => {\n    if (this.mount) {\n      const width = this.mount.clientWidth\n      const height = this.mount.clientHeight\n\n      this.camera = new THREE.PerspectiveCamera(\n        75,\n        width / height,\n        0.1,\n        1000\n      )\n      this.camera.position.z = basePlateLength / 2;\n      this.camera.position.y = 5;\n      \n      this.renderer.setClearColor('#000000')\n      this.renderer.setSize(width, height)\n      this.mount.appendChild(this.renderer.domElement);\n\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.minPolarAngle = 0;\n      this.controls.maxPolarAngle = Math.PI/2 -0.02;\n      this.controls.minDistance = 0;\n      this.controls.maxDistance = Infinity;\n\n      this.controls.enableZoom = true;\n      this.controls.zoomSpeed = 1.0;\n\n      window.addEventListener( 'mousemove', this.onMouseMove, false );\n      \n      this.start()\n    }\n  }\n\n  componentWillUnmount(){\n    this.stop()\n    if(this.mount) {\n      this.mount.removeChild(this.renderer.domElement)\n    }\n  }\n\n  onMouseMove = ( event: MouseEvent ) => {\n    this.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    this.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop = () => {\n    if (this.frameId) {\n      cancelAnimationFrame(this.frameId)\n    }\n  }\n\n  animate = () => {\n    this.checkRayCollisions();\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  checkRayCollisions = () => {\n    const {interfaceState} = this.state;\n    if(interfaceState == \"ADD_COLUMN\") {\n      this.raycaster.setFromCamera( this.mouse, this.camera );\n      var intersects = this.raycaster.intersectObjects( this.basePlate.getHoverableObjects() );\n\n      if(intersects.length) {\n        (intersects[0].object as HoverableMesh).onHover(this.state.interfaceState);\n      }\n    } else if (interfaceState == \"RESIZE_COLUMN\" && this.clickedMouse && this.controls) {\n      const zoomDistance = this.controls.target.distanceTo( this.controls.object.position )\n      this.columns.resizeSelectedColumn(Math.round((this.mouse.y - this.clickedMouse.y) * zoomDistance / 2));\n    }\n  }\n\n  clickOnScene = () => {\n    const {interfaceState} = this.state;\n    if(interfaceState == \"ADD_COLUMN\") {\n      this.clickedMouse = this.mouse.clone();\n      this.raycaster.setFromCamera( this.mouse, this.camera );\n      var intersects = this.raycaster.intersectObjects( this.basePlate.getHoverableObjects() );\n  \n      if(intersects.length) {\n        (intersects[0].object as HoverableMesh).onClick(this.state.interfaceState);\n      }\n    } else if (interfaceState == \"RESIZE_COLUMN\") {\n      this.clickedMouse = undefined;\n      this.setState({\n        interfaceState: \"VIEW\",\n      });\n      this.columns.deselectColumn();\n    }\n  }\n\n  placeColumn = (length: number, width: number) => {\n    if(this.state.interfaceState == \"ADD_COLUMN\"){\n      this.changeInterfaceState(\"RESIZE_COLUMN\");\n      this.columns.addColumn(length, width);\n    }\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  public changeInterfaceState = (newState: string) => {\n    this.setState({\n      interfaceState: newState,\n    })\n  }\n\n  render(){\n    return(\n      <div className={`App ${this.state.interfaceState}`}>\n        <div\n          style={{ width: '100%', height: '100%' }}\n          ref={(mount) => { this.mount = mount }}\n          onClick={this.clickOnScene}\n        />\n        <Menu interfaceState={this.state.interfaceState} changeInterfaceState={this.changeInterfaceState} />\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}